{"version":3,"sources":["conponents/card/card-component.js","conponents/card-list/card-list-component.js","conponents/search-box/search-box-component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","handleChange","placeholder","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAClB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLXC,EAAW,SAAAR,GACtB,OACE,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,YAAjB,OACvB,uBACEZ,UAAU,aACVa,KAAK,SACLD,YAAcA,EACdE,SAAUH,MCgCCI,G,wDAlCb,aAAe,IAAD,8BACZ,gBAaFJ,aAAa,SAACK,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAEd,EAAKP,aAAe,EAAKA,aAAaW,KAAlB,gBANR,E,qDAQf,WAAqB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAET,SAAUmB,S,oBAM7C,WAAU,IAAD,EAC2BC,KAAKP,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZW,EAAiBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAEA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAChG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEY,YAAY,iBACZD,aAAciB,KAAKjB,eAErB,cAAC,EAAD,CAAUH,SAAUqB,W,GA5BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d9ae3fb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css';\r\n\r\nexport const Card = props => {\r\n  return(\r\n    <div className=\"card-container\">\r\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n    )\r\n};","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from  '../card/card-component'\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n            {\r\n          props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster}  />\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ handleChange ,placeholder}) => (\r\n  <input\r\n    className='search-box'\r\n    type='search'\r\n    placeholder={ placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);","import React, { Component } from 'react';\nimport { CardList } from './conponents/card-list/card-list-component.js'\nimport { SearchBox } from './conponents/search-box/search-box-component.js';\nimport './App.css';\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n }\n  \n  handleChange=(e) =>{\n    this.setState({searchField:e.target.value})\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Card list filter</h1>\n        <SearchBox\n          placeholder='Search monster'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n    </div>\n  )\n  };\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}